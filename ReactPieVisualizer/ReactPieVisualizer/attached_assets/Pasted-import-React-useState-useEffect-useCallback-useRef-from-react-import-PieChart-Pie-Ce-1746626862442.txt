import React, { useState, useEffect, useCallback, useRef } from 'react';
import { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, Legend, ResponsiveContainer } from 'recharts';
import { UploadCloud, Download, FileText, BarChart2, Zap, Leaf, Plane, Hotel, Lightbulb, AlertCircle, CheckCircle, Settings, Home, FileCsv, Info, X } from 'lucide-react';
import { Button } from "@/components/ui/button";
import { 
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { cn } from "@/lib/utils";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { Skeleton } from "@/components/ui/skeleton";

// --- Constants and Configuration ---
const APP_NAME = "CarbonSnapshot";
const TAGLINE = "Get your carbon footprint estimate in minutes.";
const TEAL_COLOR = "#14b8a6"; // teal-500
const GREEN_COLOR = "#10b981"; // emerald-500

const SCOPES = {
  SCOPE_1: "Scope 1: Direct Emissions",
  SCOPE_2: "Scope 2: Indirect Emissions - Purchased Energy",
  SCOPE_3: "Scope 3: Indirect Emissions - Value Chain",
};

// Mock emission factors (kg CO2e per unit)
// These would ideally come from a comprehensive database or an AI model
const MOCK_EMISSION_FACTORS = {
  'electricity': { factor: 0.4, unit: 'kWh', scope: SCOPES.SCOPE_2, category: 'Energy' }, // kg CO2e/kWh
  'natural gas': { factor: 2.0, unit: 'therm', scope: SCOPES.SCOPE_1, category: 'Energy' }, // kg CO2e/therm
  'gasoline': { factor: 2.3, unit: 'liter', scope: SCOPES.SCOPE_1, category: 'Travel' }, // kg CO2e/liter
  'diesel': { factor: 2.7, unit: 'liter', scope: SCOPES.SCOPE_1, category: 'Travel' },
  'flights': { factor: 0.15, unit: 'km', scope: SCOPES.SCOPE_3, category: 'Travel' }, // kg CO2e/km (passenger-km)
  'hotel stays': { factor: 25, unit: 'night', scope: SCOPES.SCOPE_3, category: 'Travel' }, // kg CO2e/night
  'waste': { factor: 0.5, unit: 'kg', scope: SCOPES.SCOPE_3, category: 'Operations' }, // kg CO2e/kg
  'water': { factor: 0.3, unit: 'm3', scope: SCOPES.SCOPE_3, category: 'Operations' }, // kg CO2e/m3
  'commuting': { factor: 0.12, unit: 'km', scope: SCOPES.SCOPE_3, category: 'Travel' }, // Employee commuting
  'business travel - rail': { factor: 0.04, unit: 'km', scope: SCOPES.SCOPE_3, category: 'Travel' },
  'refrigerants': { factor: 1500, unit: 'kg', scope: SCOPES.SCOPE_1, category: 'Operations' }, // Leakage, GWP of common refrigerant
  'office supplies': { factor: 5, unit: 'item_bundle', scope: SCOPES.SCOPE_3, category: 'Operations' }, // Highly abstract
  'cloud computing': { factor: 0.05, unit: 'hour_cpu', scope: SCOPES.SCOPE_3, category: 'Operations' },
  'default': { factor: 1, unit: 'unit', scope: SCOPES.SCOPE_3, category: 'Other' }, // Default for unrecognized items
};

// Sample CSV Data
const SAMPLE_CSV_DATA = `Activity,Quantity,Unit,Date
Electricity Usage,1500,kWh,2023-01-15
Natural Gas,200,therm,2023-01-20
Gasoline Purchase,300,liter,2023-02-10
Flight - NYC to LON,11000,km,2023-03-05
Hotel Stay,5,night,2023-03-10
Office Waste,50,kg,2023-04-01
Water Consumption,20,m3,2023-04-05
Employee Commuting,2500,km,2023-05-01
Business Travel - Rail,800,km,2023-06-15
Refrigerant Leak,0.5,kg,2023-07-01
Cloud Services,500,hour_cpu,2023-08-01
Office Supplies,10,item_bundle,2023-09-01`;

// --- Helper Components ---

const TooltipIcon = ({ text, children }) => {
  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <span className="cursor-pointer inline-flex items-center ml-2">
            {children}
          </span>
        </TooltipTrigger>
        <TooltipContent>
          <p>{text}</p>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
};

const LoadingSpinner = ({ message = "Processing..." }) => (
  <div className="flex flex-col items-center justify-center space-y-3 p-8">
    <svg className="animate-spin h-10 w-10 text-teal-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
    <p className="text-gray-600 text-lg">{message}</p>
  </div>
);

const AlertMessage = ({ message, type = 'info', onDismiss }) => {
  let IconComponent;

  switch (type) {
    case 'error':
      IconComponent = AlertCircle;
      break;
    case 'success':
      IconComponent = CheckCircle;
      break;
    default: // info
      IconComponent = Info;
  }

  return (
    <Alert className={cn(type === "error" ? "bg-red-100 text-red-700" : type === "success" ? "bg-green-100 text-green-700" : "bg-blue-100 text-blue-700")}>
        <IconComponent className="w-6 h-6 mr-3 flex-shrink-0" />
        <AlertDescription className="flex-grow">{message}</AlertDescription>
        {onDismiss && (
            <Button onClick={onDismiss} variant="ghost" className="ml-4 p-1 rounded-full hover:bg-opacity-20 hover:bg-current">
              <X className="w-5 h-5" />
            </Button>
          )}
    </Alert>
  );
};

// --- Main Application Component ---
const App = () => {
  const [currentPage, setCurrentPage] = useState('home'); // 'home', 'upload', 'dashboard'
  const [csvData, setCsvData] = useState(null);
  const [emissionsData, setEmissionsData] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [companyName, setCompanyName] = useState("");
  const fileInputRef = useRef(null);

  // --- Mock AI Processing and Calculation ---
  const processEmissions = useCallback(async (parsedData) => {
    setIsLoading(true);
    setError(null);
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 1500));

    try {
      if (!parsedData || !parsedData.data || parsedData.data.length === 0) {
        throw new Error("No data to process. Please upload a valid CSV.");
      }

      const detailedEmissions = [];
      let totalCO2e = 0;

      // Assuming first row is header
      const headers = parsedData.data[0].map(h => h.trim().toLowerCase());
      const activityIndex = headers.indexOf('activity');
      const quantityIndex = headers.indexOf('quantity');
      const unitIndex = headers.indexOf('unit');

      if (activityIndex === -1 || quantityIndex === -1 || unitIndex === -1) {
        throw new Error("CSV must contain 'Activity', 'Quantity', and 'Unit' columns.");
      }

      parsedData.data.slice(1).forEach((row, index) => {
        if (row.length < Math.max(activityIndex, quantityIndex, unitIndex) + 1 || row.every(cell => !cell || cell.trim() === "")) return; // Skip empty rows

        const activity = row[activityIndex]?.trim().toLowerCase();
        const quantity = parseFloat(row[quantityIndex]);
        const unit = row[unitIndex]?.trim().toLowerCase();

        if (!activity || isNaN(quantity) || !unit) {
          console.warn(`Skipping row ${index + 2}: Invalid data - Activity: ${activity}, Quantity: ${quantity}, Unit: ${unit}`);
          return; // Skip rows with missing critical data
        }

        let emissionFactorInfo = MOCK_EMISSION_FACTORS[activity] ||
          Object.values(MOCK_EMISSION_FACTORS).find(ef => activity.includes(ef.category.toLowerCase())) ||
          MOCK_EMISSION_FACTORS['default'];

        const co2e = quantity * emissionFactorInfo.factor;
        totalCO2e += co2e;

        detailedEmissions.push({
          id: `item-${index}`,
          activity: row[activityIndex],
          quantity,
          unit: row[unitIndex],
          scope: emissionFactorInfo.scope,
          category: emissionFactorInfo.category,
          co2e: parseFloat(co2e.toFixed(2)),
        });
      });

      if (detailedEmissions.length === 0) {
        throw new Error("No valid emission activities found in the CSV data.");
      }

      const byScope = detailedEmissions.reduce((acc, item) => {
        acc[item.scope] = (acc[item.scope] || 0) + item.co2e;
        return acc;
      }, {});

      const byCategory = detailedEmissions.reduce((acc, item) => {
        acc[item.category] = (acc[item.category] || 0) + item.co2e;
        return acc;
      }, {});

      setEmissionsData({
        totalCO2e: parseFloat(totalCO2e.toFixed(2)),
        detailed: detailedEmissions,
        byScope: Object.entries(byScope).map(([name, value]) => ({ name, value: parseFloat(value.toFixed(2)) })),
        byCategory: Object.entries(byCategory).map(([name, value]) => ({ name, value: parseFloat(value.toFixed(2)) })),
      });
      setCurrentPage('dashboard');

    } catch (e) {
      console.error("Error processing emissions:", e);
      setError(e.message || "An unexpected error occurred during processing.");
      setEmissionsData(null);
    } finally {
      setIsLoading(false);
    }
  }, []);


  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) { 
      setError(null);
      setIsLoading(true);
      if (!window.Papa) {
        setError("CSV parsing library (PapaParse) is not loaded. Please check your internet connection or contact support.");
        setIsLoading(false);
        return;
      }
      window.Papa.parse(file, { // Use window.Papa
        header: false,
        skipEmptyLines: true,
        complete: (results) => {
          setCsvData(results);
          processEmissions(results);
        },
        error: (err) => {
          console.error("PapaParse Error:", err);
          setError(`Error parsing CSV file: ${err.message}. Please ensure it's a valid CSV.`);
          setIsLoading(false);
          setCsvData(null);
        }
      });
    }
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  const downloadSampleCSV = () => {
    const blob = new Blob([SAMPLE_CSV_DATA], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement("a");
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute("href", url);
      link.setAttribute("download", "sample_carbon_data.csv");
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  // --- PDF Report Generation ---
  const generatePDFReport = () => {
    if (!emissionsData) return;
    setIsLoading(true);

    if (!window.jspdf || !window.jspdf.jsPDF) {
      setError("PDF generation library (jsPDF) is not loaded. Please check your internet connection or contact support."); 
      setIsLoading(false);
 return;
    }

    try {
      const { jsPDF } = window.jspdf; // Destructure jsPDF from window.jspdf
      const pdf = new jsPDF(); // Use the constructor
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      const margin = 20;
      let currentY = margin;

      // Header
      pdf.setFontSize(24);
      pdf.setTextColor(TEAL_COLOR);
      pdf.text(APP_NAME, pageWidth / 2, currentY, { align: 'center' });
      currentY += 10;
      pdf.setFontSize(12);
      pdf.setTextColor(100);
      pdf.text("Carbon Footprint Report", pageWidth / 2, currentY, { align: 'center' });
      currentY += 15;

      if (companyName) {
        pdf.setFontSize(14);
        pdf.setTextColor(0);
        pdf.text(`Company: ${companyName}`, margin, currentY);
        currentY += 10;
      }

      pdf.setFontSize(10);
      pdf.text(`Report Generated: ${new Date().toLocaleDateString()}`, margin, currentY);
      currentY += 15;

      pdf.setFontSize(18);
      pdf.setTextColor(TEAL_COLOR);
      pdf.text("Total Estimated Emissions", margin, currentY);
      currentY += 8;
      pdf.setFontSize(22);
      pdf.setTextColor(0);
      pdf.text(`${emissionsData.totalCO2e.toLocaleString()} kg CO₂e`, margin, currentY);
      currentY += 10;
      pdf.setFontSize(14);
      pdf.text(`(${(emissionsData.totalCO2e / 1000).toLocaleString()} metric tons CO₂e)`, margin, currentY);
      currentY += 20;

      pdf.setFontSize(16);
      pdf.setTextColor(TEAL_COLOR);
      pdf.text("Top Emission Sources:", margin, currentY);
      currentY += 8;
      pdf.setFontSize(12);
      pdf.setTextColor(0);
      const topSources = [...emissionsData.detailed]
        .sort((a, b) => b.co2e - a.co2e)
        .slice(0, 5);

      topSources.forEach(source => {
        if (currentY > pageHeight - margin - 10) {
          pdf.addPage();
 currentY = margin;
        }
        pdf.text(`- ${source.activity} (${source.category}): ${source.co2e.toLocaleString()} kg CO₂e`, margin + 5, currentY);
        currentY += 7;
      });
      currentY += 10;

      pdf.setFontSize(16); 
      pdf.setTextColor(TEAL_COLOR);
      pdf.text("Emissions by Scope:", margin, currentY);
      currentY += 8;
      pdf.setFontSize(12);
      emissionsData.byScope.forEach(scope => {
        if (currentY > pageHeight - margin - 10) {
          pdf.addPage();
 currentY = margin;
        }
        pdf.text(`${scope.name}: ${scope.value.toLocaleString()} kg CO₂e (${((scope.value / emissionsData.totalCO2e) * 100).toFixed(1)}%)`, margin + 5, currentY);
        currentY += 7;
      });
      currentY += 15;

      pdf.setFontSize(16);
      pdf.setTextColor(TEAL_COLOR);
      pdf.text("AI-Generated Recommendations:", margin, currentY);
      currentY += 8;
      pdf.setFontSize(12);
      const recommendations = [
        "1. Conduct an energy audit to identify savings opportunities in lighting and HVAC systems.",
        "2. Promote sustainable travel policies: encourage virtual meetings and public transport for commutes.",
        "3. Invest in renewable energy sources, such as solar panels or purchasing green electricity tariffs.",
        "4. Implement a comprehensive waste reduction and recycling program across all facilities.",
        "5. Evaluate supply chain partners for their sustainability practices and prioritize those with lower carbon footprints."
      ];
      recommendations.slice(0, 3).forEach(rec => {
        if (currentY > pageHeight - margin - 10) {
 pdf.addPage();
 currentY = margin;
        }
        const splitText = pdf.splitTextToSize(rec, pageWidth - margin * 2 - 5);
        pdf.text(splitText, margin + 5, currentY);
        currentY += (splitText.length * 5) + 2;
      });

      const pageCount = pdf.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        pdf.setPage(i);
        pdf.setFontSize(8); 
 pdf.setTextColor(150);
        pdf.text(`Page ${i} of ${pageCount}`, pageWidth / 2, pageHeight - 10, { align: 'center' });
        pdf.text(`${APP_NAME} - Confidential`, margin, pageHeight - 10);
      }

      pdf.save(`CarbonSnapshot_Report_${companyName ? companyName.replace(/\s+/g, '_') + '_' : ''}${new Date().toISOString().slice(0, 10)}.pdf`);
    } catch (e) {
      console.error("Error generating PDF:", e);
      setError("Failed to generate PDF report. " + e.message);
    } finally {
      setIsLoading(false);
    }
  };

  const navigate = (page) => {
 setError(null);
    setCurrentPage(page);
  };
  
  const resetApp = () => { 
    setCsvData(null);
    setEmissionsData(null);
    setError(null);
    setCompanyName("");
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
    navigate('home');
  }

  const renderPage = () => { 
 if (isLoading && currentPage !== 'dashboard') {
      return <LoadingSpinner message={currentPage === 'upload' ? "Parsing CSV & Calculating Emissions..." : "Loading..."} />;
    }

    switch (currentPage) {
      case 'home':
        return <HomePage onFileUpload={handleFileUpload} onSampleDownload={downloadSampleCSV} fileInputRef={fileInputRef} error={error} setError={setError} isLoading={isLoading} />;
      case 'dashboard':
        if (isLoading && !emissionsData) return <LoadingSpinner message="Calculating Emissions..." />;
        if (!emissionsData && !error) {
          setTimeout(() => navigate('home'), 0);
          return <LoadingSpinner message="Preparing dashboard..." />;
        }
        return <DashboardPage
          emissionsData={emissionsData}
          onGeneratePDF={generatePDFReport}
          companyName={companyName}
          setCompanyName={setCompanyName}
          onReset={resetApp}
          isLoading={isLoading}
          error={error}
          setError={setError}
        />;
      default:
        return <HomePage onFileUpload={handleFileUpload} onSampleDownload={downloadSampleCSV} fileInputRef={fileInputRef} error={error} setError={setError} />;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-100 to-blue-50 font-sans text-gray-800 flex flex-col">
      <header className="bg-white shadow-md sticky top-0 z-50">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-20">
            <div className="flex items-center cursor-pointer" onClick={() => emissionsData ? navigate('dashboard') : navigate('home')}>
              <Leaf className="h-10 w-10 text-teal-500" />
              <h1 className="ml-3 text-3xl font-bold text-gray-700 tracking-tight">{APP_NAME}</h1>
            </div>
            <nav className="flex items-center space-x-4">
              {currentPage !== 'home' && <Button onClick={() => navigate('home')} variant="outline" className="border-2 border-teal-500 text-teal-500 hover:bg-teal-50 focus:ring-teal-500" >
                <Home className="w-5 h-5 mr-2" /> 
                Home
              </Button>}
              {emissionsData && currentPage !== 'dashboard' && <Button onClick={() => navigate('dashboard')} >Dashboard</Button>}
            </nav>
          </div>
        </div>
 </header>

      <main className="flex-grow container mx-auto px-4 sm:px-6 lg:px-8 py-8 md:py-12">
        {renderPage()}
      </main>

      <footer className="bg-gray-800 text-gray-300 py-8 text-center">
        <div className="container mx-auto px-4">
          <p>&copy; {new Date().getFullYear()} {APP_NAME}. All rights reserved (for demo purposes).</p>
          <p className="text-sm mt-1">Simplifying your journey to sustainability.</p>
        </div>
      </footer>
    </div>
  );
};


// --- Page Components ---

const HomePage = ({ onFileUpload, onSampleDownload, fileInputRef, error, setError, isLoading }) => {
  return (
    <div className="flex flex-col items-center justify-center text-center py-10 md:py-20">
      <Leaf className="h-24 w-24 text-teal-500 mb-6 animate-pulse" />
      <h2 className="text-5xl md:text-6xl font-extrabold text-gray-800 mb-4">
        Welcome to <span className="text-teal-500">{APP_NAME}</span>
      </h2>
      <p className="text-xl md:text-2xl text-gray-600 mb-10 max-w-2xl">{TAGLINE}</p>

      {error && (
        <div className="w-full max-w-md mb-6">
          <AlertMessage message={error} type="error" onDismiss={() => setError(null)} />
        </div>
      )}

      <Card className="w-full max-w-lg text-left">
        <CardHeader>
        <CardTitle className="flex items-center">
            <UploadCloud className="w-7 h-7 mr-3 text-teal-500" />
            Start Your Analysis
        </CardTitle>
        <CardDescription>
        Upload your operational data as a CSV file. We'll help you estimate your carbon footprint.
          Ensure your CSV has columns like 'Activity', 'Quantity', and 'Unit'.
        </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <Input
            type="file"
            accept=".csv"
            onChange={onFileUpload}
            className="hidden"
            id="csvUpload"
            ref={fileInputRef}
          />
 <Button onClick={() => document.getElementById('csvUpload').click()} className="w-full text-lg py-4" disabled={isLoading}>
 {isLoading ? (
 <svg className="animate-spin h-5 w-5 text-white mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
 <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
 </svg>
 ) : <UploadCloud className="w-5 h-5 mr-2"/>}
            Upload CSV File
          </Button>
          <Button onClick={onSampleDownload} variant="secondary" className="w-full text-lg py-4">
            <Download className="w-5 h-5 mr-2"/>
            Download Sample CSV
          </Button>
        </CardContent>
      </Card>

      <div className="mt-12 p-6 bg-teal-50 border border-teal-200 rounded-xl max-w-2xl w-full">
        <h4 className="text-lg font-semibold text-teal-700 mb-3 flex items-center"><Info size={20} className="mr-2" />How it Works:</h4>
        <ol className="list-decimal list-inside text-left text-gray-600 space-y-1">
          <li>Prepare your data: Gather information on electricity, fuel, travel, waste, etc.</li>
          <li>Format as CSV: Use columns like 'Activity' (e.g., Gasoline), 'Quantity' (e.g., 100), 'Unit' (e.g., liters).</li>
          <li>Upload: Select your CSV file.</li>
          <li>Analyze: Our system (mock AI) categorizes emissions and calculates CO₂e.</li>
          <li>Report: View your dashboard and download a PDF summary.</li>
        </ol>
      </div>
    </div>
  );
};

const CHART_COLORS = [TEAL_COLOR, GREEN_COLOR, '#f59e0b', '#3b82f6', '#ec4899', '#8b5cf6'];
const DashboardSkeleton = () => (
  <div className="space-y-8 md:space-y-12">
    <Skeleton className="h-12 w-1/2 mx-auto" />
    <Skeleton className="h-32 w-full" />
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 md:gap-12">
      <Card><CardHeader><Skeleton className="h-8 w-2/3" /></CardHeader><CardContent><Skeleton className="h-64 w-full" /></CardContent></Card>
      <Card><CardHeader><Skeleton className="h-8 w-2/3" /></CardHeader><CardContent><Skeleton className="h-64 w-full" /></CardContent></Card>
    </div>
    <Card><CardHeader><Skeleton className="h-8 w-1/3" /></CardHeader><CardContent><Skeleton className="h-4 w-full mb-2" /><Skeleton className="h-4 w-full mb-2" /><Skeleton className="h-4 w-full mb-2" /></CardContent></Card>
    <Card><CardHeader><Skeleton className="h-8 w-full" /></CardHeader><CardContent><Skeleton className="h-48 w-full" /></CardContent></Card>
  </div>
);

const DashboardPage = ({ emissionsData, onGeneratePDF, companyName, setCompanyName, onReset, isLoading, error, setError }) => {
  if (error && !emissionsData) {
 return (
      <div className="text-center py-10">
        <AlertCircle className="h-16 w-16 text-red-500 mx-auto mb-4" />
        <h3 className="text-2xl font-semibold text-red-600 mb-2">Processing Error</h3>
        <p className="text-gray-600 mb-6 max-w-md mx-auto">{error}</p>
        <Button onClick={onReset} className="border-2 border-teal-500 text-teal-500 hover:bg-teal-50 focus:ring-teal-500">
          <Home className="w-5 h-5 mr-2" />
          Try Again with a New File
        </Button>
      </div>
    );
  }

  if (!emissionsData) {
 return <DashboardSkeleton />;
  }

  const { totalCO2e, byScope, byCategory, detailed } = emissionsData;

  const topCategories = [...byCategory].sort((a, b) => b.value - a.value).slice(0, 5);

  return (
    <div className="space-y-8 md:space-y-12">
      {error && (
        <div className="w-full">
          <AlertMessage message={error} type="error" onDismiss={() => setError(null)} />
        </div>
      )}
      <div className="text-center">
        <h2 className="text-3xl md:text-4xl font-bold text-gray-800">Your Carbon Footprint Dashboard</h2>
        {companyName && <p className="text-xl text-gray-600 mt-1">For: {companyName}</p>}
      </div>

      <Card className="bg-teal-500 text-white text-center">
        <CardContent>
            <Zap color="white" className="mx-auto mb-4" />
            <p className="text-xl mb-1">Total Estimated Emissions</p>
            <p className="text-5xl font-extrabold">{totalCO2e.toLocaleString()} kg CO₂e</p>
            <p className="text-lg opacity-90">({(totalCO2e / 1000).toLocaleString()} metric tons CO₂e)</p>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 md:gap-12">
        <Card >
            <CardHeader>
                <CardTitle className="flex items-center">
                <BarChart2 className="w-7 h-7 mr-3 text-teal-500" />
                    Emissions by Scope
                </CardTitle>
            </CardHeader>
          <CardContent>
          {byScope && byScope.length > 0 ? (
            <ResponsiveContainer width="100%" height={350}>
              <PieChart>
                <Pie data={byScope} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={120} labelLine={false}
                  label={({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {
                    const RADIAN = Math.PI / 180;
                    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;
                    const x = cx + radius * Math.cos(-midAngle * RADIAN);
                    const y = cy + radius * Math.sin(-midAngle * RADIAN);
                    return (
                      <text x={x} y={y} fill="white" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline="central" fontSize="12px">
                        {`${(percent * 100).toFixed(0)}%`}
                      </text>
                    );
                  }}
                >
                  {byScope.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={CHART_COLORS[index % CHART_COLORS.length]} />
                  ))}
                </Pie>
                <RechartsTooltip formatter={(value) => `${value.toLocaleString()} kg CO₂e`} />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          ) : <p className="text-gray-500">No scope data available.</p>}
        </CardContent>
        </Card>

        <Card >
            <CardHeader>
                <CardTitle className="flex items-center">
                <Lightbulb className="w-7 h-7 mr-3 text-teal-500" />
                    Top Emission Categories
                </CardTitle>
            </CardHeader>
          <CardContent>
          {topCategories && topCategories.length > 0 ? (
            <ResponsiveContainer width="100%" height={350}>
              <BarChart data={topCategories} layout="vertical" margin={{ top: 5, right: 20, left: 40, bottom: 5 }}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis type="number" unit=" kg CO₂e" />
                <YAxis dataKey="name" type="category" width={100} interval={0} tick={{ fontSize: 12 }} />
                <RechartsTooltip formatter={(value) => `${value.toLocaleString()} kg CO₂e`} />
                <Legend />
                <Bar dataKey="value" name="CO₂e" >
                  {topCategories.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={CHART_COLORS[index % CHART_COLORS.length]} />
                  ))}
                </Bar>
              </BarChart>
            </ResponsiveContainer>
          ) : <p className="text-gray-500">No category data available.</p>}
          </CardContent>
        </Card>
      </div>

      <Card >
            <CardHeader>
                <CardTitle className="flex items-center">
                <FileText className="w-7 h-7 mr-3 text-teal-500" />
                    Emission Details
                </CardTitle>
            </CardHeader>
        <CardContent className="space-y-4">
          <div className="mb-4">
            <label htmlFor="companyName" className="block text-sm font-medium text-gray-700 mb-1">
              Company Name (for PDF Report):
            </label>
            <Input
              type="text"
              id="companyName"
              value={companyName}
              onChange={(e) => setCompanyName(e.target.value)}
              placeholder="Enter your company name (optional)"
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-teal-500 focus:border-teal-500 sm:text-sm"
            />
          </div>
          <div className="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-4">
            <Button 
 onClick={onGeneratePDF} 
 disabled={isLoading} 
                className="w-full sm:w-auto">
 {isLoading ? (
 <svg className="animate-spin h-5 w-5 text-white mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
 ) : <Download className="w-5 h-5 mr-2" />}
              {